pipeline {
    agent any
    environment {
        REGISTRY = "eu.gcr.io/lbg-mea-17"
        MYSQL_ROOT_PASSWORD = credentials("MYSQL_ROOT_PASSWORD")
        APP_IMAGE_NAME = "dwr-task2"
        APP_VERSION = "v1"
        DB_IMAGE_NAME = "dwr-task2-mysql"
        DB_VERSION = "v1"
        NAME_SPACE = "task2"
    }
    stages {
        stage('Build') {
            steps {
                sh "docker build -t $REGISTRY/$APP_IMAGE_NAME:$APP_VERSION Task2/flask-app"
                sh "docker build -t $REGISTRY/$DB_IMAGE_NAME:$DB_VERSION Task2/db"
            }
        }
        stage('Test') {
            steps {
                sh "echo Testing..."
                sh "sleep 5"
                sh "echo PASSED"
            }
        }
        stage('Push') {
            steps {
                sh "gcloud config set account dwr-service-acct@lbg-mea-17.iam.gserviceaccount.com"
                sh "docker push $REGISTRY/$APP_IMAGE_NAME:$APP_VERSION"
                sh "docker push $REGISTRY/$DB_IMAGE_NAME:$DB_VERSION"
            }
        }
        stage('Deploy') {
            steps {
                sh "gcloud config set account dwr-k8s-service@lbg-mea-17.iam.gserviceaccount.com"
                sh "kubectl create ns $NAME_SPACE || true"
                sh "sed -e 's,{{MYSQL_ROOT_PASSWORD}},'$MYSQL_ROOT_PASSWORD',g;' Task2/db-password.yml | kubectl apply -f Task2/db-password.yml"
                sh "kubectl apply -f Task2/manifests --namespace $NAME_SPACE"
                sh "sleep 60"
                sh "kubectl get services --namespace $NAME_SPACE"
            }
        }
    }
    post {
        always {
            sh "docker system prune -f"
            sh "gcloud config set account null"
        }
        failure {
            sh "kubectl delete ns $NAME_SPACE"
        }
    }
}